#!/usr/bin/env python3
"""
STREAMLIT WEB UI –î–õ–Ø DOCUMENT ANONYMIZER
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Unified Document Service

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- Frontend (Streamlit) - —ç—Ç–æ—Ç —Ñ–∞–π–ª
- Backend (FastAPI) - unified_document_service
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ HTTP API –∏–ª–∏ –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã –º–æ–¥—É–ª–µ–π

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
1. –ó–∞–≥—Ä—É–∑–∫–∞ Word-–¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ UI
2. –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö  
3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–º–µ–Ω —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
5. –ü—Å–µ–≤–¥–æ–∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
6. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: Word + Excel –æ—Ç—á–µ—Ç
"""

import streamlit as st
import pandas as pd
import tempfile
import os
import sys
from pathlib import Path
import json
from datetime import datetime
import requests
import io
import base64

# –ü—É—Ç—å –∫ unified_document_service –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
UNIFIED_SERVICE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'unified_document_service'))
sys.path.append(os.path.join(UNIFIED_SERVICE_PATH, 'app'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–µ—Ä–µ–∑ HTTP)
API_BASE_URL = "http://localhost:8000"  # Gateway
USE_DIRECT_IMPORT = False  # True = –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç, False = —á–µ—Ä–µ–∑ HTTP API

# –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ HTTP API —Ä–µ–∂–∏–º
USE_DIRECT_IMPORT = False
MODULES_AVAILABLE = False

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π unified_document_service –æ—Ç–∫–ª—é—á–µ–Ω
# —Ç–∞–∫ –∫–∞–∫ frontend —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ HTTP API Gateway –¥–ª—è –ª—É—á—à–µ–π –∏–∑–æ–ª—è—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤


def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state –¥–ª—è –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    if 'current_step' not in st.session_state:
        st.session_state.current_step = 1
    if 'uploaded_file' not in st.session_state:
        st.session_state.uploaded_file = None
    if 'found_data' not in st.session_state:
        st.session_state.found_data = []
    if 'patterns_file' not in st.session_state:
        st.session_state.patterns_file = ""
    if 'user_comments' not in st.session_state:
        st.session_state.user_comments = {}

def step1_upload_document():
    """–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑"""
    st.markdown("## üìÇ –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç")
    
    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –§–∞–π–ª –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        patterns_file = st.text_area(
            "–§–∞–π–ª –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", 
            value=os.path.join(UNIFIED_SERVICE_PATH, "patterns/sensitive_patterns.xlsx"),
            help="–ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–∏—Å–∫–∞",
            height=60,
            key="step1_patterns_file"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if st.button("üîç –ù–∞–π—Ç–∏ —Ñ–∞–π–ª –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", key="step1_find_patterns"):
            possible_paths = [
                os.path.join(UNIFIED_SERVICE_PATH, "patterns", "sensitive_patterns.xlsx"),
                os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "unified_document_service", "patterns", "sensitive_patterns.xlsx")),
                "C:\\Projects\\Anonymizer\\unified_document_service\\patterns\\sensitive_patterns.xlsx"
            ]
            
            for path in possible_paths:
                if os.path.exists(path):
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: `{path}`")
                    st.info("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –ø—É—Ç—å –≤ –ø–æ–ª–µ –≤—ã—à–µ")
                    break
            else:
                st.error("‚ùå –§–∞–π–ª –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
    
    st.session_state.patterns_file = patterns_file
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ Word –¥–æ–∫—É–º–µ–Ω—Ç (.docx)",
        type=['docx'],
        help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª –¥–ª—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏"
    )
    
    if uploaded_file:
        st.session_state.uploaded_file = uploaded_file
        st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", type="primary", key="step1_analyze"):
            with st.spinner("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç..."):
                found_data = analyze_document_api(uploaded_file, patterns_file)
                if found_data is not None:
                    st.session_state.found_data = found_data
                    st.session_state.current_step = 2
                    st.rerun()

def step2_review_findings():
    """–®–∞–≥ 2: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"""
    st.markdown("## –®–∞–≥ 2: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    
    found_data = st.session_state.found_data
    
    # Sidebar —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.subheader(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {st.session_state.uploaded_file.name}")
        st.markdown("---")
        st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        if found_data:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_count = len(found_data)
            approved_count = sum(1 for item in found_data if item.get('approved', False))
            st.metric("–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ", total_count)
            st.metric("–ö –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏", approved_count)
            st.metric("–ò—Å–∫–ª—é—á–µ–Ω–æ", total_count - approved_count)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            st.subheader("üìã –ü–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö")
            df_stats = pd.DataFrame(found_data)
            type_counts = df_stats['type'].value_counts()
            for data_type, count in type_counts.items():
                st.text(f"{data_type}: {count}")
            
            # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            avg_confidence = df_stats['confidence'].mean()
            st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.0%}")
        

    
    if not found_data:
        st.info("‚ÑπÔ∏è –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
        if st.button("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", key="step2_reanalyze"):
            st.session_state.current_step = 1
            st.rerun()
        return
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    st.markdown(f"### –ù–∞–π–¥–µ–Ω—ã —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(found_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    table_data = []
    for i, item in enumerate(found_data):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: unified_document_service = "–î–∞", nlp_service = "–ù–µ—Ç"
        # –ü–æ–∫–∞ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–¥—É—Ç –æ—Ç unified_document_service, –ø–æ—ç—Ç–æ–º—É "–î–∞"
        is_structured = item.get('source', 'unified_document_service') == 'unified_document_service'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        block_text = item.get('block_text', item.get('context', '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))
        original_value = item.get('original_value', '')
        
        # –í—ã–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if original_value and original_value in block_text:
            highlighted_context = block_text.replace(original_value, f"**{original_value}**")
        else:
            highlighted_context = block_text
        
        table_data.append({
            'ID': i + 1,
            '–¢–∏–ø': item.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            '–ó–Ω–∞—á–µ–Ω–∏–µ': item.get('original_value', ''),
            '–°–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç': highlighted_context,
            'UUID –∑–∞–º–µ–Ω–∞': item.get('uuid', ''),
            '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ': '–î–∞' if is_structured else '–ù–µ—Ç',
            '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': item.get('confidence', 1.0),
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': item.get('comment', ''),
            '–ó–∞–º–µ–Ω–∏—Ç—å': item.get('approved', True)
        })
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if table_data:
        edited_df = st.data_editor(
            pd.DataFrame(table_data),
            column_config={
                'ID': st.column_config.NumberColumn('‚Ññ', disabled=True),
                '–¢–∏–ø': st.column_config.TextColumn('–¢–∏–ø', disabled=True),
                '–ó–Ω–∞—á–µ–Ω–∏–µ': st.column_config.TextColumn('–ó–Ω–∞—á–µ–Ω–∏–µ', disabled=True),
                '–°–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç': st.column_config.TextColumn(
                    '–°–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç', 
                    disabled=True,
                    help="–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"
                ),
                'UUID –∑–∞–º–µ–Ω–∞': st.column_config.TextColumn('UUID –∑–∞–º–µ–Ω–∞', disabled=True),
                '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ': st.column_config.TextColumn(
                    '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 
                    disabled=True,
                    help="–î–∞ = unified_document_service, –ù–µ—Ç = nlp_service"
                ),
                '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': st.column_config.NumberColumn(
                    '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', 
                    format="%.0%%", 
                    disabled=True,
                    help="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"
                ),
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': st.column_config.TextColumn(
                    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 
                    help="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–π"
                ),
                '–ó–∞–º–µ–Ω–∏—Ç—å': st.column_config.CheckboxColumn(
                    '–ó–∞–º–µ–Ω–∏—Ç—å', 
                    help="–û—Ç–º–µ—Ç—å—Ç–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—é"
                )
            },
            hide_index=True,
            use_container_width=True,
            key="found_data_editor"
        )
        
        # CSS —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        st.markdown("""
        <style>
        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ */
        div[data-testid="stDataEditor"] [data-testid="column-–ó–∞–º–µ–Ω–∏—Ç—å"] input[type="checkbox"]:checked {
            accent-color: #ff4b4b;
            background-color: #ff4b4b;
        }
        
        /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç accent-color */
        div[data-testid="stDataEditor"] [data-testid="column-–ó–∞–º–µ–Ω–∏—Ç—å"] input[type="checkbox"]:checked::before {
            background-color: #ff4b4b;
        }
        </style>
        """, unsafe_allow_html=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session_state –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
        for i, row in edited_df.iterrows():
            if i < len(st.session_state.found_data):
                st.session_state.found_data[i]['approved'] = row['–ó–∞–º–µ–Ω–∏—Ç—å']
                st.session_state.found_data[i]['comment'] = row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']
    
    # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    col1, col2, col3 = st.columns([6, 1, 1])
    with col1:
        st.empty()  # –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–¥–≤–∏–≥–∞ –∫–Ω–æ–ø–æ–∫ –≤–ø—Ä–∞–≤–æ
    with col2:
        if st.button("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", key="step2_select_all"):
            for i in range(len(found_data)):
                st.session_state.found_data[i]['approved'] = True
            st.rerun()
    with col3:
        if st.button("‚ùå –°–Ω—è—Ç—å –≤—Å–µ", key="step2_deselect_all"):
            for i in range(len(found_data)):
                st.session_state.found_data[i]['approved'] = False
            st.rerun()
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏
    st.markdown("---")
    selected_count = sum(1 for item in found_data if item.get('approved', False))
    
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ", type="secondary", key="step2_back"):
            st.session_state.current_step = 1
            st.rerun()
    with col2:
        st.metric("–í—ã–±—Ä–∞–Ω–æ –¥–ª—è –∑–∞–º–µ–Ω—ã", f"{selected_count}/{len(found_data)}")
    with col3:
        if st.button("üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—é", type="primary", disabled=(selected_count == 0), key="step2_confirm"):
            with st.spinner("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—é..."):
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏
                st.success("‚úÖ –ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                st.session_state.current_step = 3
                st.rerun()

def step3_download_results():
    """–®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    st.markdown("## üì• –®–∞–≥ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏")
    
    st.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    
    # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    st.markdown("### üìÅ –§–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
    st.markdown("- üìÑ –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
    st.markdown("- üìä Excel –æ—Ç—á–µ—Ç —Å –∑–∞–º–µ–Ω–∞–º–∏")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    st.markdown("---")
    if st.button("üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", type="primary", key="step3_download_files"):
        with st.spinner("ÔøΩ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."):
            # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏
            approved_items = [item for item in st.session_state.found_data if item.get('approved', False)]
            
            if not approved_items:
                st.warning("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏")
            else:
                # –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏
                anonymized_files = anonymize_document_full_api(
                    st.session_state.uploaded_file, 
                    approved_items,
                    st.session_state.patterns_file
                )
                
                if anonymized_files:
                    st.success(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(anonymized_files)}")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                    for file_info in anonymized_files:
                        st.download_button(
                            label=file_info['label'],
                            data=file_info['data'],
                            file_name=file_info['filename'],
                            mime=file_info['mime'],
                            key=f"download_{file_info['type']}"
                        )
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤")
    
    if st.button("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", key="step3_new_document"):
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        st.session_state.current_step = 1
        st.session_state.uploaded_file = None
        st.session_state.found_data = []
        st.session_state.user_comments = {}
        st.rerun()

def analyze_document_api(uploaded_file, patterns_file):
    """–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ HTTP API"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    progress_bar = st.progress(0)
    st.info("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gateway...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code != 200:
            st.error("‚ùå Gateway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            progress_bar.empty()
            return None
        st.success("‚úÖ Gateway –¥–æ—Å—Ç—É–ø–µ–Ω")
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gateway: {str(e)}")
        progress_bar.empty()
        return None
    
    progress_bar.progress(20)
    st.info("ÔøΩ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑...")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        files = {
            'file': (uploaded_file.name, uploaded_file.getvalue(), 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        data = {
            'patterns_file': patterns_file
        }
        
        progress_bar.progress(40)
        st.info("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ (—Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑, –±–µ–∑ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏)
        response = requests.post(
            f"{API_BASE_URL}/analyze_document", 
            files=files,
            data=data,
            timeout=60
        )
        
        progress_bar.progress(70)
        
        if response.status_code == 200:
            result = response.json()
            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            progress_bar.progress(90)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            found_data = []
            
            if 'found_items' in result and result['found_items']:
                for i, item in enumerate(result['found_items']):
                    found_item = {
                        'id': i + 1,
                        'block_id': item.get('block_id', f'block_{i}'),
                        'type': item.get('category', item.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')),
                        'original_value': item.get('original_value', item.get('value', '')),
                        'uuid': item.get('uuid', item.get('replacement', '')),
                        'position': item.get('position', {}),
                        'confidence': item.get('confidence', 1.0),
                        'approved': True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–¥–æ–±—Ä–µ–Ω–æ
                        'comment': '',
                        'source': 'unified_document_service',  # –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                        'block_text': item.get('block_text', item.get('context', '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))  # –¢–µ–∫—Å—Ç –±–ª–æ–∫–∞
                    }
                    found_data.append(found_item)
                
                st.info(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(found_data)} —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            else:
                st.info("‚ÑπÔ∏è –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            progress_bar.progress(100)
            progress_bar.empty()
            return found_data
            
        else:
            error_detail = response.json() if response.headers.get('content-type', '').startswith('application/json') else response.text
            st.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            st.error(f"–î–µ—Ç–∞–ª–∏: {error_detail}")
            progress_bar.empty()
            return None
            
    except requests.exceptions.Timeout:
        st.error("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Ñ–∞–π–ª–æ–º –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
        progress_bar.empty()
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        progress_bar.empty()
        return None
    except Exception as e:
        st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        progress_bar.empty()
        return None


def anonymize_document_full_api(uploaded_file, approved_items, patterns_file):
    """–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ HTTP API —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        files = {
            'file': (uploaded_file.name, uploaded_file.getvalue(), 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')
        }
        
        data = {
            'patterns_file': patterns_file,
            'generate_excel_report': True,
            'generate_json_ledger': False  # –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º JSON, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª–Ω—É—é –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—é
        response = requests.post(
            f"{API_BASE_URL}/anonymize_full", 
            files=files,
            data=data,
            timeout=120
        )
        
        if response.status_code == 200:
            result = response.json()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_files = []
            
            files_base64 = result.get('files_base64', {})
            
            # –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            if files_base64.get('anonymized_document_base64'):
                import base64
                doc_data = base64.b64decode(files_base64['anonymized_document_base64'])
                download_files.append({
                    'type': 'document',
                    'label': 'üìÑ –°–∫–∞—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
                    'data': doc_data,
                    'filename': f"{uploaded_file.name.rsplit('.', 1)[0]}_anonymized.docx",
                    'mime': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                })
            
            # Excel –æ—Ç—á–µ—Ç
            if files_base64.get('excel_report_base64'):
                import base64
                excel_data = base64.b64decode(files_base64['excel_report_base64'])
                download_files.append({
                    'type': 'excel',
                    'label': 'üìä –°–∫–∞—á–∞—Ç—å Excel –æ—Ç—á–µ—Ç —Å –∑–∞–º–µ–Ω–∞–º–∏',
                    'data': excel_data,
                    'filename': f"{uploaded_file.name.rsplit('.', 1)[0]}_report.xlsx",
                    'mime': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                })
            
            return download_files
            
        else:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            if hasattr(response, 'json'):
                try:
                    error_detail = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    st.error(f"–î–µ—Ç–∞–ª–∏: {error_detail}")
                except:
                    st.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        st.error("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Ñ–∞–π–ª–æ–º –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        return None
    except Exception as e:
        st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title="Document Anonymizer - Frontend",
        page_icon="üîí",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # CSS –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—Ç—É–ø–æ–≤
    st.markdown("""
    <style>
    .css-1d391kg {
        width: 350px;
    }
    .css-1lcbmhc {
        width: 350px;
    }
    section[data-testid="stSidebar"] {
        width: 350px !important;
    }
    section[data-testid="stSidebar"] > div {
        width: 350px !important;
    }
    
    /* –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    
    /* –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
    h1 {
        padding-top: 0rem;
        margin-top: 0rem;
        margin-bottom: 0.5rem;
    }
    
    h2 {
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
    }
    
    h3 {
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
    }
    
    /* –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */
    .stMarkdown {
        margin-bottom: 0.5rem;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */
    div[data-testid="metric-container"] {
        margin-bottom: 0.5rem;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    initialize_session_state()
    
    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —ç—Ç–∞–ø–∞–º
    current_step = st.session_state.current_step
    
    if current_step == 1:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
        st.title("üîí –ê–Ω–æ–Ω–∏–º–∞–π–∑–µ—Ä docx-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        st.markdown("**–ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è DOCX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∑–∞–º–µ–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ UUID –∏ –ø–æ–ª–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        with st.expander("‚ÑπÔ∏è –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞", expanded=False):
            st.markdown("""
            **üéØ –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞:** –ó–∞–º–µ–Ω–∏—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (email, —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –∫–æ–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤) –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ UUID 
            —Å **–ø–æ–ª–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è** –¥–æ–∫—É–º–µ–Ω—Ç–∞.
            
            **üîÑ –ü—Ä–æ—Ü–µ—Å—Å:**
            1. –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –ø–æ–∏—Å–∫ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            2. –ü–æ–∫–∞–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º  
            3. **–¢–æ—á–µ—á–Ω–∞—è –∑–∞–º–µ–Ω–∞** –Ω–∞ UUID —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π
            4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω–∞—Ö
            
            **‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç:** `admin@company.ru` ‚Üí `d0e62465-8f2a-4b3c-9e1f...` —Å —Ç–µ–º –∂–µ —à—Ä–∏—Ñ—Ç–æ–º, —Ü–≤–µ—Ç–æ–º, —Ä–∞–∑–º–µ—Ä–æ–º!
            """)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        st.markdown("""
        ### üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
        1. **üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX –¥–æ–∫—É–º–µ–Ω—Ç** –≤ —Ä–∞–∑–¥–µ–ª–µ "–®–∞–≥ 1" –Ω–∏–∂–µ
        2. **üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ** –≤ —Ä–∞–∑–¥–µ–ª–µ "–®–∞–≥ 2"
        3. **‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–º–µ–Ω—ã** —Å –ø–æ–º–æ—â—å—é —á–µ–∫–±–æ–∫—Å–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        4. **üì• –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç** - –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ—Ç—á–µ—Ç—ã
        """)
        
        step1_upload_document()
    elif current_step == 2:
        step2_review_findings()
    elif current_step == 3:
        step3_download_results()
    else:
        st.session_state.current_step = 1
        st.rerun()


if __name__ == "__main__":
    main()